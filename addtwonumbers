/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode addTwoNumbers(ListNode node1, ListNode node2) {
        ListNode headnode=new ListNode(0);//headnode is always used for future reference of starting point of linked list.
        ListNode current=headnode;
        int carry=0;
        
        while(l1!=null||l2!=null){
            int l1_val= (l1 !=null)?l1.val:0;
            int l2_val= (l2 !=null)?l2.val:0;
            int sum=l1_val+l2_val+carry;
            carry=l3_val/10;
            
            ListNode newNode=new ListNode(sum % 10);
            current.next=newNode;
            current=current.next;// you have to increase the l3 value also.i forgot this step and it leads to exponential time.
            
            if(l1!=null) l1=l1.next;
            if(l2!=null) l2=l2.next;
        }
          if(carry>0)
        {
            l3.next=new ListNode(carry);
            
        }
        return dummyhead.next;
        
    }
  
}
